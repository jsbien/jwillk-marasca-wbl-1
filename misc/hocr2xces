#!/usr/bin/python
# encoding=UTF-8

# Copyright Â© 2011 Jakub Wilk <jwilk@jwilk.net>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 dated June, 1991.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

'''
Convert hOCR document (read from standard intput)
to IPI PAN variant of XCES (written to standard output).
'''

import argparse
import sys
import xml.sax.saxutils as xmlutils

import lxml.etree as etree

xces_header = '''\
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE cesAna SYSTEM "xcesAnaIPI.dtd">
<cesAna version="IPI-1.2">
<chunkList>
'''

xces_footer = '''\
</chunkList>
</cesAna>
'''

class ArgumentParser(argparse.ArgumentParser):

    def __init__(self):
        argparse.ArgumentParser.__init__(self, description=__doc__)
        self.add_argument('--empty-base', action='store_true', help='use OBJECT REPLACEMENT CHARACTER (U+FFFC) as base form')

def extract_classes(s):
    for x in s.split():
        if x.startswith('ocr_'):
            yield x[4:]
        elif x.startswith('ocrx_'):
            yield x[5:]

def main():
    oparser = ArgumentParser()
    options = oparser.parse_args()
    print xces_header,
    text_buffer = []
    tail = None
    for event, elem in etree.iterparse(sys.stdin, events=('start', 'end')):
        if text_buffer:
            for line in text_buffer:
                print text_buffer
        classes = elem.get('class', '')
        classes = list(extract_classes(classes))
        is_word = 'word' in classes
        if is_word:
            classes.remove('word')
        if event == 'start':
            for cls in classes:
                print '<chunk type=%s>' % xmlutils.quoteattr(cls.encode('UTF-8'))
                tail = True # <ns/> is never needed at the beggining of a chunk
        else:
            if is_word:
                text = elem.text or ''
                if not tail:
                    print '<ns/>'
                print '<tok>'
                print '<orth>%s</orth>' % xmlutils.escape(text.encode('UTF-8'))
                if options.empty_base:
                    base = u'\N{OBJECT REPLACEMENT CHARACTER}'
                else:
                    base = text
                tag = 'ign'
                print '<lex disamb="1"><base>%s</base><ctag>%s</ctag></lex>' % (xmlutils.escape(base.encode('UTF-8')), tag)
                print '</tok>'
            for cls in classes:
                print '</chunk>'
            tail = elem.tail
            elem.clear()
    print xces_footer,

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
